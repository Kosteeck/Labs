/*
–õ–∞–≤—Ä—É—Ö–∏–Ω –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ú–∞–∫—Å–∏–º–æ–≤–∏—á
–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ4.
–í–∞—Ä–∏–∞–Ω—Ç ‚Ññ8
–ó–∞–¥–∞–Ω–∏–µ:–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±–µ—Ä–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞, —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã,
–∑–Ω–∞–∫–∏ —Ç–∞–±—É–ª—è—Ü–∏–∏ –∏ –∑–∞–ø–∏—à–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>
#define SIZE 512

int checkFile(FILE *myFile);							// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
int amountOfFile(FILE *myFile);							// –ü–æ–¥—Å—á–µ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ñ–∞–π–ª–µ
int fillMassiveFromFile(char *sentence, int size, int counter, FILE *myFile);	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–∞
int deleteSpaces(char *sentence, int size);					// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ —Ç–∞–±—É–ª—è—Ü–∏–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
int fillFileFromMassive(char *sentence, int size, FILE *finallFile);		// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞

int main(void)
{
	int counter = 0;
	char sentence[SIZE];
	FILE* myFile = fopen("enterText.txt", "r");
	FILE* finalFile = fopen("finalText.txt", "w");
	checkFile(myFile);
	int size = amountOfFile(myFile);
	fseek(myFile, 0, SEEK_SET);
	counter = fillMassiveFromFile(sentence, size, counter, myFile);
	deleteSpaces(sentence, size);
	size = size - counter;
	fillFileFromMassive(sentence, size, finalFile);
	fprintf(finalFile, "(”‰‡ÎÂÌÓ %i ÔÓ·ÂÎÓ‚ Ë ÁÌ‡ÍÓ‚ Ú‡·ÛÎˇˆËË)", counter);
}

int checkFile(FILE *myFile)
{
	if (myFile == NULL)
	{
		printf("Please, enter text in the file next time");
		_getch();
		exit(0);
	}
	return 0;
}

int amountOfFile(FILE *myFile)
{
	int size = 0;
	for (int i = 0; fgetc(myFile) != EOF; i++)
		size = size + 1;
	return size;
}

int deleteSpaces(char *sentence, int size)
{
	int i, j;
	for (i = 0; i < size; i++)
	{
		j = i + 1;
		while (sentence[i] == ' ' || sentence[i] == '\t' || sentence[i] == '\v')
		{
			sentence[i] = sentence[j];
			sentence[j] = ' ';
			j = j + 1;
		}
	}
	return 0;
}

int fillMassiveFromFile(char *sentence, int size, int counter, FILE *myFile)
{
	for (int i = 0; i < size; i++)
	{
		sentence[i] = fgetc(myFile);
		if (sentence[i] == ' ' || sentence[i] == '\t' || sentence[i] == '\v')
			counter = counter + 1;
	}
	return counter;
}

int fillFileFromMassive(char *sentence, int size, FILE *finalFile)
{
	for (int i = 0; i < size; i++)
		fprintf(finalFile, "%c", sentence[i]);
	return 0;
}
